//! This crate contains a framework for low-degree tests (LDTs).

#![no_std]

pub mod naive;

extern crate alloc;

use p3_field::field::{AbstractFieldExtension, Field, TwoAdicField};
use p3_matrix::dense::RowMajorMatrix;

/// Computes low-degree extensions of polynomials over `F`, which are given in the Lagrange basis
/// over two-adic multiplicative subgroups of `FE`.
pub trait TwoAdicLDE<F, FE>
where
    F: Field,
    FE: AbstractFieldExtension<F> + TwoAdicField,
{
    /// The result type. Typically this will be `FE`, but it may also be a compressed encoding of
    /// the subspace of `FE` that may be produced by LDEs.
    type Res: Into<FE>;

    /// Given a batch of polynomials, each defined by `2^k` evaluations over the subgroup generated
    /// by `F::primitive_root_of_unity(k)`, compute their evaluations over the subgroup generated
    /// by `F::primitive_root_of_unity(k + lde_bits)`.
    fn subgroup_lde_batch(
        &self,
        polys: RowMajorMatrix<F>,
        lde_bits: usize,
    ) -> RowMajorMatrix<Self::Res>;

    /// Given a batch of polynomials, each defined by `2^k` evaluations over the subgroup generated
    /// by `F::primitive_root_of_unity(k)`, compute their evaluations over the coset `shift H`,
    /// where `H` is the subgroup generated by `F::primitive_root_of_unity(k + lde_bits)`.
    fn coset_lde_batch(
        &self,
        polys: RowMajorMatrix<F>,
        lde_bits: usize,
        shift: F,
    ) -> RowMajorMatrix<Self::Res>;
}
